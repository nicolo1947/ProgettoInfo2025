package view;

import controller.GestoreAppelli;
import controller.GestoreCorsi;
import controller.GestoreDisciplina;
import controller.GestoreDocenti;
import controller.GestoreStudenti;
import controller.Lettore;
import static controller.Main.S;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DateFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import model.Appello;
import model.Corso;
import model.Disciplina;
import model.Docente;
import model.IscrizioneAppello;
import model.Studente; //altro package



public class Interfaccia extends javax.swing.JFrame {

    GestoreCorsi gestoreCorsi = new GestoreCorsi();
    GestoreStudenti gestoreStudenti = new GestoreStudenti();
    GestoreDisciplina gestoreDisciplina = new GestoreDisciplina();
    GestoreDocenti gestoreDocenti = new GestoreDocenti();
    GestoreAppelli gestoreAppelli = new GestoreAppelli();
    private javax.swing.JComboBox<String> JComboBoxCorsi;
    Lettore lettore;
    
    public Interfaccia() {
        
       initComponents();
       inizializzaDati();
    }
    
    private void inizializzaDati() {
        lettore = new Lettore();
        
        boolean ok = true;
        
        ok &= lettore.letturaCorso("corsi.csv");
        ok &= lettore.letturaDisciplina("discipline.csv");
        ok &= lettore.letturaStudenti("studenti.csv");
        ok &= lettore.letturaDocenti("docenti.csv");
        ok &= lettore.letturaAppello("appelli.csv");
        ok &= lettore.letturaIscAppello("iscrizioni_appelli.csv");
        
        
        
        if (!ok) {
            System.err.println("Errore durante la lettura dei file CSV.");
            javax.swing.JOptionPane.showMessageDialog(this, "Errore durante il caricamento dei dati.", "Errore", javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {
            System.out.println("Dati caricati con successo");
        }
    }
       

    
    /**
     * Creates new form Interfaccia
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        comboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButtonModificaCorso = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CodiceCorso", "NomeCorso", "DurataAnni", "CodiceDisciplina", "NomeDisciplina", "Cfu", "MatricolaDocente", "Nome", "Cognome", "MatricolaStudente", "IdAppello", "Data"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton1.setText("Rimuovi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("jButton5");

        jButton10.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton10.setText("Aggiungi");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        comboBox.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Corsi", "Studenti", "Docenti", "Discipline", "Appelli", "Iscrizione Appelli" }));
        comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("PROGETTO DI INFORMATICA(GESTIONE DI DATI UNIVERSITARI CON INTERFACCIA GRAFICA)");

        jButtonModificaCorso.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButtonModificaCorso.setText("Modifica");
        jButtonModificaCorso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificaCorsoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1072, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton10)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonModificaCorso))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1035, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonModificaCorso)
                    .addComponent(jButton1)
                    .addComponent(jButton10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        comboBox.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String selezione = comboBox.getSelectedItem().toString();
        int selectedRow = jTable1.getSelectedRow();

        switch (selezione) {
            case "Corsi":
    if (selectedRow != -1) {
        String codiceCorso = (String) jTable1.getValueAt(selectedRow, 0); // supponendo che la prima colonna sia il codice
        gestoreCorsi.eliminaCorso(codiceCorso);
    
        // Rimuovi la riga anche dalla tabella
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRow);
        S.salva();
    } else {
        JOptionPane.showMessageDialog(null, "Seleziona un corso da rimuovere.");
    }
                break;

            case "Studenti":
    if (selectedRow != -1) {
        String matricolaStudenti = (String) jTable1.getValueAt(selectedRow, 0); // supponendo che la prima colonna sia il codice
        gestoreStudenti.eliminaStudente(matricolaStudenti);
    
        // Rimuovi la riga anche dalla tabella
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRow);
        S.salva();
    } else {
        JOptionPane.showMessageDialog(null, "Seleziona uno studente da rimuovere.");
    }
                break;

            case "Docenti":
                if (selectedRow != -1) {
        String matricolaDocenti = (String) jTable1.getValueAt(selectedRow, 0); // supponendo che la prima colonna sia il codice
        gestoreDocenti.eliminaDocente(matricolaDocenti);
        S.salva();
    
        // Rimuovi la riga anche dalla tabella
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRow);
        S.salva();
    } else {
        JOptionPane.showMessageDialog(null, "Seleziona un docente da rimuovere.");
    }
                break;

            case "Discipline":
                if (selectedRow != -1) {
        String codiceDisciplina = (String) jTable1.getValueAt(selectedRow, 0); // supponendo che la prima colonna sia il codice
        gestoreDisciplina.eliminaDisciplina(codiceDisciplina);
    
        // Rimuovi la riga anche dalla tabella
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRow);
        S.salva();
    } else {
        JOptionPane.showMessageDialog(null, "Seleziona una disciplina da rimuovere.");
    }
                break;
            
            case "Appelli":
            if (selectedRow != -1) {
        String idAppello = (String) jTable1.getValueAt(selectedRow, 0); // supponendo che la prima colonna sia il codice
        gestoreAppelli.eliminaAppello(idAppello);
    
        // Rimuovi la riga anche dalla tabella
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRow);
        S.salva();
    } else {
        JOptionPane.showMessageDialog(null, "Seleziona un appello da rimuovere.");
    }
            break;
            
            case "Iscrizione Appelli":
            if (selectedRow != -1) {
        String idAppello = (String) jTable1.getValueAt(selectedRow, 0); // supponendo che la prima colonna sia il codice
        gestoreCorsi.eliminaCorso(idAppello);
    
        // Rimuovi la riga anche dalla tabella
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRow);
        S.salva();
    } else {
        JOptionPane.showMessageDialog(null, "Seleziona un'iscrizione da rimuovere.");
    }
            break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String selezione = comboBox.getSelectedItem().toString();

        switch (selezione) {
            case "Corsi":
                System.out.println("io");
                AggiungiCorso dialog = new AggiungiCorso(this, S.elencoCorsi, () -> {
                    // codice da eseguire dopo "SALVA"
                });
                dialog.setVisible(true);
                aggiornaTabella();
                dialog.setVisible(true);
                break;

            case "Studenti":
                AggiungiStudente dialog1 = new AggiungiStudente(this, S.elencoStudenti, () -> {
                    mostraStudentiInTabella(S.elencoStudenti);
                });
                dialog1.setVisible(true);
                break;

            case "Docenti":
                AggiungiDocente dialog2 = new AggiungiDocente(this, S.elencoDocenti, () -> {
                    mostraDocentiInTabella(S.elencoDocenti);
                });
                dialog2.setVisible(true);
                break;

            case "Discipline":
                AggiungiDisciplina dialog3 = new AggiungiDisciplina(this, S.elencoDiscipline, () -> {
                    mostraDisciplineInTabella(S.elencoDiscipline);
                });
                dialog3.setVisible(true);
                break;
            
            case "Appelli":
            AggiungiAppello dialog4 = new AggiungiAppello(this, S.elencoAppelli, () -> {
                mostraAppelliInTabella(S.elencoAppelli);
            });
            dialog4.setVisible(true);
            break;
            
            case "Iscrizione Appelli":
            System.out.println("io");
            AggiungiIscAppello dialog5 = new AggiungiIscAppello(this, S.elencoIscAppelli, () -> {
                mostraIscAppelliInTabella(S.elencoIscAppelli);
            });
            dialog5.setVisible(true);
            break;
            
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxActionPerformed
        String selectedItem = (String) comboBox.getSelectedItem();
        switch (selectedItem) {
            case "Corsi":
                System.out.println(S.elencoCorsi);
                mostraCorsiInTabella(S.elencoCorsi);
                break;
            case "Studenti":
                mostraStudentiInTabella(S.elencoStudenti);
                break;
            case "Docenti":
                mostraDocentiInTabella(S.elencoDocenti);
                break;
            case "Discipline":
                mostraDisciplineInTabella(S.elencoDiscipline);
                break;
            case "Appelli":
                mostraAppelliInTabella(S.elencoAppelli);
                break;
            case "Iscrizione Appelli":
                mostraIscAppelliInTabella(S.elencoIscAppelli);
                break;

        }
    }//GEN-LAST:event_comboBoxActionPerformed

    private void jButtonModificaCorsoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificaCorsoActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        String selectedItem = (String) comboBox.getSelectedItem();
        
        switch (selectedItem) {
            case "Corsi":
                if (selectedRow != -1) {
                    String codiceVecchio = (String) jTable1.getValueAt(selectedRow, 0);
    
                    // Recupero nuovi valori dai campi
                    String nuovoCodice = (String) jTable1.getValueAt(selectedRow, 0);
                    String nuovoNome = (String) jTable1.getValueAt(selectedRow, 1);
                    int nuovaDurata = Integer.parseInt(jTable1.getValueAt(selectedRow, 2).toString());
    
    
    
                    gestoreCorsi.modificaCorso(new Corso(nuovoCodice, nuovoNome, nuovaDurata));  // aggiungi il nuovo
                    S.salva();
                    // Aggiorna la riga nella tabella
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setValueAt(nuovoCodice, selectedRow, 0);
                    model.setValueAt(nuovoNome, selectedRow, 1);
                    model.setValueAt(nuovaDurata, selectedRow, 2);
                    S.salva();
                } else {
                    JOptionPane.showMessageDialog(null, "Seleziona un corso da modificare.");
                }
            S.salva();
                break;
            case "Studenti":
                if (selectedRow != -1) {
                    String StudenteVecchio = (String) jTable1.getValueAt(selectedRow, 0);
    
                    // Recupero nuovi valori dai campi
                    String MatricolaStudente = (String) jTable1.getValueAt(selectedRow, 0);
                    String Nome = (String) jTable1.getValueAt(selectedRow, 1);
                    String Cognome = (String) jTable1.getValueAt(selectedRow, 2);
                    String CodiceCorso = (String) jTable1.getValueAt(selectedRow, 3);
    
                    gestoreStudenti.modificaStudente(new Studente(MatricolaStudente, Nome, Cognome, CodiceCorso));  // aggiungi il nuovo
                    S.salva();
                    // Aggiorna la riga nella tabella
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setValueAt(MatricolaStudente, selectedRow, 0);
                    model.setValueAt(Nome, selectedRow, 1);
                    model.setValueAt(Cognome, selectedRow, 2);
                    model.setValueAt(CodiceCorso, selectedRow, 3);
                    S.salva();
                } else {
                    JOptionPane.showMessageDialog(null, "Seleziona uno studente da modificare.");
                }
            S.salva();
                break;
            /*case "Docenti":
                if (selectedRow != -1) {
                    String docenteVecchio = (String) jTable1.getValueAt(selectedRow, 0);
    
                    // Recupero nuovi valori dai campi
                    String MatricolaDocente = (String) jTable1.getValueAt(selectedRow, 0);
                    String Nome = (String) jTable1.getValueAt(selectedRow, 1);
                    String Cognome = (String) jTable1.getValueAt(selectedRow, 2);
                    String CodiceDisciplina = (String) jTable1.getValueAt(selectedRow, 3);
    
    
    
                   // gestoreDocenti.modificaDocente(new Docente(MatricolaDocente, Nome, Cognome, CodiceDisciplina));  // aggiungi il nuovo

                    // Aggiorna la riga nella tabella
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setValueAt(MatricolaDocente, selectedRow, 0);
                    model.setValueAt(Nome, selectedRow, 1);
                    model.setValueAt(Cognome, selectedRow, 2);
                    model.setValueAt(CodiceDisciplina, selectedRow, 3);
                } else {
                    JOptionPane.showMessageDialog(null, "Seleziona un corso da modificare.");
                }
            S.salva();
                break;*/
            case "Discipline":
                if (selectedRow != -1) {
                    String DisciplinaVecchia = (String) jTable1.getValueAt(selectedRow, 0);
    
                    // Recupero nuovi valori dai campi
                    String nuovoCodiceDis = (String) jTable1.getValueAt(selectedRow, 0);
                    String nuovoNome = (String) jTable1.getValueAt(selectedRow, 1);
                    int nuovoCFU = Integer.parseInt(jTable1.getValueAt(selectedRow, 2).toString());
                    String nuovoCodiceCo = (String) jTable1.getValueAt(selectedRow, 3);
    
    
    
                    gestoreDisciplina.modificaDisciplina(new Disciplina(nuovoCodiceDis, nuovoNome, nuovoCFU, nuovoCodiceCo));  // aggiungi il nuovo

                    // Aggiorna la riga nella tabella
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setValueAt(nuovoCodiceDis, selectedRow, 0);
                    model.setValueAt(nuovoNome, selectedRow, 1);
                    model.setValueAt(nuovoCFU, selectedRow, 2);
                    model.setValueAt(nuovoCodiceCo, selectedRow, 3);
                    S.salva();
                } else {
                    JOptionPane.showMessageDialog(null, "Seleziona una disciplina da modificare.");
                }
            S.salva();
                break;
            case "Appelli":
                if (selectedRow != -1) {
                    String vecchioAppello = (String) jTable1.getValueAt(selectedRow, 0);
    
                    // Recupero nuovi valori dai campi
                    String nuovoId = (String) jTable1.getValueAt(selectedRow, 0);
                    String nuovaData = (String) jTable1.getValueAt(selectedRow, 1);
                    String nuovoCodice = (String) jTable1.getValueAt(selectedRow, 2);
    
    
    
                    gestoreAppelli.modificaAppello(new Appello(nuovoId, nuovaData, nuovoCodice));  // aggiungi il nuovo

                    // Aggiorna la riga nella tabella
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setValueAt(nuovoId, selectedRow, 0);
                    model.setValueAt(nuovaData, selectedRow, 1);
                    model.setValueAt(nuovoCodice, selectedRow, 2);
                    S.salva();
                } else {
                    JOptionPane.showMessageDialog(null, "Seleziona un appello da modificare.");
                }
            S.salva();
                break;
            /*case "Iscrizione Appelli":
                if (selectedRow != -1) {
                    String codiceVecchio = (String) jTable1.getValueAt(selectedRow, 0);
    
                    // Recupero nuovi valori dai campi
                    String nuovoCodice = (String) jTable1.getValueAt(selectedRow, 0);
                    String nuovoNome = (String) jTable1.getValueAt(selectedRow, 1);
                    int nuovaDurata = Integer.parseInt(jTable1.getValueAt(selectedRow, 2).toString());
    
    
    
                    gestoreCorsi.modificaCorso(new Corso(nuovoCodice, nuovoNome, nuovaDurata));  // aggiungi il nuovo

                    // Aggiorna la riga nella tabella
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setValueAt(nuovoCodice, selectedRow, 0);
                    model.setValueAt(nuovoNome, selectedRow, 1);
                    model.setValueAt(nuovaDurata, selectedRow, 2);
                } else {
                    JOptionPane.showMessageDialog(null, "Seleziona un corso da modificare.");
                }
            S.salva();
                break;
*/
        }
    }//GEN-LAST:event_jButtonModificaCorsoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        S.letturaCorso("corsi.csv");
        S.letturaDisciplina("discipline.csv");
        S.letturaDocenti("docenti.csv");
        S.letturaStudenti("studenti.csv");
        S.letturaAppello("appelli.csv");
        S.letturaIscAppello("iscrizioni_appelli.csv");
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaccia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaccia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaccia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaccia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaccia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButtonModificaCorso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void mostraCorsiInTabella(ArrayList<Corso> corsi) {
        String[] colonne = {"Codice Corso", "Nome Corso", "Durata (ore)"};
        Object[][] dati = new Object[corsi.size()][3];

        for (int i = 0; i < corsi.size(); i++) {
            Corso c = corsi.get(i);
            dati[i][0] = c.getCodiceCorso();
            dati[i][1] = c.getNome();
            dati[i][2] = c.getDurata();
        }

        DefaultTableModel model = new DefaultTableModel(dati, colonne);
        jTable1.setModel(model);
    }

    private void mostraStudentiInTabella(ArrayList<Studente> studenti) {
        String[] colonne = {"MatricolaStudente", "Nome", "Cognome", "CodiceCorso"};
        Object[][] dati = new Object[studenti.size()][4];

        for (int i = 0; i < studenti.size(); i++) {
            Studente s = studenti.get(i);
            dati[i][0] = s.getMatricola();
            dati[i][1] = s.getNome();
            dati[i][2] = s.getCognome();
            dati[i][3] = s.getCodice();
        }

        DefaultTableModel model = new DefaultTableModel(dati, colonne);
        jTable1.setModel(model);
    }

    private void mostraDocentiInTabella(ArrayList<Docente> docenti) {
        String[] colonne = {"matricolaDocente", "Nome", "Cognome", "codiceDisciplina"};
        Object[][] dati = new Object[docenti.size()][4];

        for (int i = 0; i < docenti.size(); i++) {
            Docente d = docenti.get(i);
            dati[i][0] = d.getMatricola();
            dati[i][1] = d.getNome();
            dati[i][2] = d.getCognome();
            dati[i][3] = d.getDisciplina();
        }

        DefaultTableModel model = new DefaultTableModel(dati, colonne);
        jTable1.setModel(model);
    }

    private void mostraDisciplineInTabella(ArrayList<Disciplina> discipline) {
        String[] colonne = {"CodiceDisciplina", "Nome", "CFU", "CodiceCorso"};
        Object[][] dati = new Object[discipline.size()][4];

        for (int i = 0; i < discipline.size(); i++) {
            Disciplina ds = discipline.get(i);
            dati[i][0] = ds.getCodiceDisciplina();
            dati[i][1] = ds.getNome();
            dati[i][2] = ds.getCfu();
            dati[i][3] = ds.getCodice();
        }

        DefaultTableModel model = new DefaultTableModel(dati, colonne);
        jTable1.setModel(model);
    }

    private void mostraAppelliInTabella(ArrayList<Appello> appelli) {
        String[] colonne = {"IdAppello", "Data", "CodiceDisciplina"};
        Object[][] dati = new Object[appelli.size()][3];

        for (int i = 0; i < appelli.size(); i++) {
            Appello a = appelli.get(i);
            dati[i][0] = a.getIdAppello();
            dati[i][1] = a.getData();
            dati[i][2] = a.getCodiceDisciplina();
        }

        DefaultTableModel model = new DefaultTableModel(dati, colonne);
        jTable1.setModel(model);
    }

    private void mostraIscAppelliInTabella(ArrayList<IscrizioneAppello> iscrizioneappelli) {
        String[] colonne = {"IdAppello", "MatricolaStudente"};
        Object[][] dati = new Object[iscrizioneappelli.size()][2];

        for (int i = 0; i < iscrizioneappelli.size(); i++) {
            IscrizioneAppello ia = iscrizioneappelli.get(i);
            dati[i][0] = ia.getIdAppelloIsc();
            dati[i][1] = ia.getMatricolaS();
        }

        DefaultTableModel model = new DefaultTableModel(dati, colonne);
        jTable1.setModel(model);
    }

    private void aggiornaTabella() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        for (Corso c : S.elencoCorsi) {
            if (c != null) {
                model.addRow(new Object[]{c.getCodiceCorso(), c.getNome(), c.getDurata()});
            }
        }
    }

}
